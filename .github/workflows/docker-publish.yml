name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: syphax0/syphax-perso

jobs:
  generate-version:
    name: Generate Version Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
      previous-tag: ${{ steps.version.outputs.previous-tag }}
      is-initial-release: ${{ steps.version.outputs.is-initial-release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate next version
        id: version
        run: |
          # Get latest semantic version tag
          latest_tag=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")
          echo "Latest tag: ${latest_tag:-'none'}"
          
          # Parse version and increment patch
          if [[ -n "$latest_tag" && $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            next_version="v$major.$minor.$((patch + 1))"
            is_initial="false"
          else
            next_version="v1.0.0"
            is_initial="true"
          fi
          
          echo "Next version: $next_version"
          echo "version=$next_version" >> $GITHUB_OUTPUT
          echo "short-sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "previous-tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "is-initial-release=$is_initial" >> $GITHUB_OUTPUT
      
      - name: Validate version
        run: |
          version="${{ steps.version.outputs.version }}"
          
          # Check if version follows semantic versioning
          if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $version"
            exit 1
          fi
          
          # Check if tag already exists
          if git rev-parse "$version" >/dev/null 2>&1; then
            echo "⚠️ Tag $version already exists"
            echo "This might indicate a workflow re-run or manual tag creation"
          else
            echo "✅ Version $version is valid and available"
          fi

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: generate-version
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.generate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.generate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.generate-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Docker image for ${{ github.repository }}
            org.opencontainers.image.version=${{ needs.generate-version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            VERSION=${{ needs.generate-version.outputs.version }}
            COMMIT_SHA=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-version, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create git tag
        run: |
          version="${{ needs.generate-version.outputs.version }}"
          
          if git rev-parse "$version" >/dev/null 2>&1; then
            echo "Tag $version already exists, skipping creation"
            exit 0
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$version" -m "Release $version
          
          🐳 Docker Image: ${{ env.IMAGE_NAME }}:$version
          📦 Digest: ${{ needs.build.outputs.image-digest }}
          🔗 Commit: ${{ github.sha }}"
          
          git push origin "$version"
          echo "✅ Created and pushed tag: $version"
      
      - name: Generate release notes
        id: notes
        run: |
          version="${{ needs.generate-version.outputs.version }}"
          previous_tag="${{ needs.generate-version.outputs.previous-tag }}"
          is_initial="${{ needs.generate-version.outputs.is-initial-release }}"
          
          echo "# Release $version" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ "$is_initial" == "true" ]]; then
            echo "🎉 **Initial Release**" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of the application." >> release_notes.md
          else
            echo "## 📋 Changes since $previous_tag" >> release_notes.md
            echo "" >> release_notes.md
            
            # Generate commit log
            if git log --pretty=format:"- %s (%h)" "$previous_tag"..HEAD > commits.tmp 2>/dev/null; then
              cat commits.tmp >> release_notes.md
            else
              echo "- Various improvements and bug fixes" >> release_notes.md
            fi
          fi
          
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🐳 Docker Image" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker pull ${{ env.IMAGE_NAME }}:$version" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Image Digest:** \`${{ needs.build.outputs.image-digest }}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Supported Platforms:** linux/amd64, linux/arm64" >> release_notes.md
      
      - name: Create GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ needs.generate-version.outputs.version }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: releaseNotes,
                draft: false,
                prerelease: false,
                generate_release_notes: false
              });
              
              console.log(`✅ Created release: ${release.data.html_url}`);
              core.summary.addHeading('🚀 Release Created');
              core.summary.addLink(`Release ${version}`, release.data.html_url);
              core.summary.addCodeBlock(`docker pull ${{ env.IMAGE_NAME }}:${version}`, 'bash');
              await core.summary.write();
              
            } catch (error) {
              if (error.status === 422 && error.message.includes('already_exists')) {
                console.log(`Release ${version} already exists`);
              } else {
                core.setFailed(`Failed to create release: ${error.message}`);
                throw error;
              }
            }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [generate-version, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Security scan summary
        if: always()
        run: |
          echo "🔒 Security scan completed for image: ${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}"
          echo "Results uploaded to GitHub Security tab"
